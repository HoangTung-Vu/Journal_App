# --- START OF FILE backend/app/schemas/schemas.py ---
from pydantic import BaseModel, EmailStr, Field
from typing import List, Optional
from datetime import datetime

# --- Token Schemas ---
class Token(BaseModel):
    access_token: str
    token_type: str = "bearer" # Default to bearer

class TokenData(BaseModel):
    email: Optional[str] = None # Use optional if needed, but usually email is required

# --- User Schemas ---
# Base model with common fields
class UserBase(BaseModel):
    email: EmailStr

# Schema for creating a user (requires password)
class UserCreate(UserBase):
    password: str = Field(..., min_length=6, description="User password (min 6 characters)")

# Schema for reading user data (doesn't include password)
class User(UserBase):
    id: int
    created_at: datetime
    # is_active: bool # Include if you have this field in the model

    # Pydantic V2 uses model_config for ORM mode
    model_config = {
        "from_attributes": True # Replaces orm_mode=True in Pydantic V1
    }
    # class Config: # Pydantic V1 style
    #     orm_mode = True


# --- Journal Entry Schemas ---
# Base model with common fields
class JournalEntryBase(BaseModel):
    title: str = Field(..., min_length=1, max_length=255, description="Title of the journal entry")
    content: str = Field(..., min_length=1, description="Content of the journal entry")

# Schema for creating a new entry (inherits from base)
class JournalEntryCreate(JournalEntryBase):
    pass # No additional fields needed for creation beyond base

# Schema for updating an entry (all fields optional)
class JournalEntryUpdate(BaseModel):
    title: Optional[str] = Field(None, min_length=1, max_length=255, description="New title (optional)")
    content: Optional[str] = Field(None, min_length=1, description="New content (optional)")

# Schema for reading/returning an entry (includes generated fields like id, owner_id, dates)
class JournalEntry(JournalEntryBase):
    id: int
    owner_id: int
    created_at: datetime
    updated_at: datetime

    # Pydantic V2 config
    model_config = {
        "from_attributes": True
    }
    # class Config: # Pydantic V1 style
    #     orm_mode = True

# --- AI Consultation Schemas ---
# Schema for the AI consultation response (used by journal endpoint)
class AIConsultationResponse(BaseModel):
    entry_id: int
    consultation: str = Field(..., description="The consultation text generated by the AI")

# --- Chat Schemas ---
# **** Đảm bảo các schema này tồn tại ****
class ChatRequest(BaseModel):
    message: str = Field(..., min_length=1, description="User's message to the chat AI")

class ChatResponse(BaseModel):
    reply: str = Field(..., description="AI's reply to the user's message")

# --- END OF FILE backend/app/schemas/schemas.py ---